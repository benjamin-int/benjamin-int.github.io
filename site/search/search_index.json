{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Benjamin Wiki Benjamin project consist of different tools that you can find a short description and their relationship with each other down below. Applications ArBade \u2192 An Environment to record and manage your own voice dataset and later train a model out of it. Mom \u2192 An Application like PolyBar to manage different workspace, show system status and showing BaTool detection output. Batool \u2192 Engine that use Kaldi model to do online automatic speech recognition with focus on zero delay and maximum accuracy. ENN \u2192 A Neural Network Engine that trains a redundant model to detect out of vocabulary (OOV) word to overcome conventional FST model limitations. Rebound \u2192 An Application that sits between BaTool and operating system and act as a virtual input that simulates key strokes and complex command execution based on the focused process. Chess \u2192 Chess devides the screen into small cells that user can choose to select a mouse operation.","title":"Home"},{"location":"#benjamin-wiki","text":"Benjamin project consist of different tools that you can find a short description and their relationship with each other down below.","title":"Benjamin Wiki"},{"location":"#applications","text":"ArBade \u2192 An Environment to record and manage your own voice dataset and later train a model out of it. Mom \u2192 An Application like PolyBar to manage different workspace, show system status and showing BaTool detection output. Batool \u2192 Engine that use Kaldi model to do online automatic speech recognition with focus on zero delay and maximum accuracy. ENN \u2192 A Neural Network Engine that trains a redundant model to detect out of vocabulary (OOV) word to overcome conventional FST model limitations. Rebound \u2192 An Application that sits between BaTool and operating system and act as a virtual input that simulates key strokes and complex command execution based on the focused process. Chess \u2192 Chess devides the screen into small cells that user can choose to select a mouse operation.","title":"Applications"},{"location":"accjoon/","text":"AccJoon AccJoon is a tool that exerts MSAA/UIA library to offer a scripting language to interact with any software. If you know the acc/uia path of a controller then AccJoon can find the controller and run an action on or read/write it's value. AccJoon is capable of even do conditional expression. Please checkout AccScript to learn more about the acc language. Usage Two options are available Scripts Dir You can create a Scripts directory beside AccJoon executable and put all of your acc script inside. AccJoon then execute them in an alphabetically order or you can give the script path and let the software to run it. accjoon <script_address> <arg1> <arg2> ... <argN> <script_address> is the relative path of a .acc script regard to the AccJoon executable path. <argN> these arguments can be accessed with \"$N\" inside AccScript .","title":"Description"},{"location":"accjoon/#accjoon","text":"AccJoon is a tool that exerts MSAA/UIA library to offer a scripting language to interact with any software. If you know the acc/uia path of a controller then AccJoon can find the controller and run an action on or read/write it's value. AccJoon is capable of even do conditional expression. Please checkout AccScript to learn more about the acc language.","title":"AccJoon"},{"location":"accjoon/#usage","text":"Two options are available","title":"Usage"},{"location":"accjoon/#scripts-dir","text":"You can create a Scripts directory beside AccJoon executable and put all of your acc script inside. AccJoon then execute them in an alphabetically order or you can give the script path and let the software to run it. accjoon <script_address> <arg1> <arg2> ... <argN> <script_address> is the relative path of a .acc script regard to the AccJoon executable path. <argN> these arguments can be accessed with \"$N\" inside AccScript .","title":"Scripts Dir"},{"location":"batool/","text":"BaTool BaTool is a real-time speech recognition engine, that gets a triphone Kaldi model and do a low latency speech recognition on the data coming from the system default microphone. BaTool Conf Batool is configurable via conf file next to BaTool application. It has 4 main sections to configure: Model Section: This section defines the location of Kaldi model files. The addresses are relative to where BaTool application exists. ; Model path [model] fst = \"Model/HCLG.fst\" mdl = \"Model/final.oalimdl\" word = \"Model/words.txt\" cmvn = \"Model/global_cmvn.stats\" Decoder Section: Kaldi related decoder settings. max_active = 900 min_active = 200 train_max = 5 ac_scale = 0.05 min_sil = 20 train_max : Maximum number of same samples for later training. min_sil : Minimum silence before detection. This value directly connected with accuracy and latency. Captain Section: ; Threshold for detecting words [captain] hard_threshold = 0.35 Miscellaneous Section: ; Miscellaneous parameters [misc] mic = \"Sennheiser\" channel = \"com_binaee_rebound\"","title":"BaTool"},{"location":"batool/#batool","text":"BaTool is a real-time speech recognition engine, that gets a triphone Kaldi model and do a low latency speech recognition on the data coming from the system default microphone.","title":"BaTool"},{"location":"batool/#batool-conf","text":"Batool is configurable via conf file next to BaTool application. It has 4 main sections to configure:","title":"BaTool Conf"},{"location":"batool/#model-section","text":"This section defines the location of Kaldi model files. The addresses are relative to where BaTool application exists. ; Model path [model] fst = \"Model/HCLG.fst\" mdl = \"Model/final.oalimdl\" word = \"Model/words.txt\" cmvn = \"Model/global_cmvn.stats\"","title":"Model Section:"},{"location":"batool/#decoder-section","text":"Kaldi related decoder settings. max_active = 900 min_active = 200 train_max = 5 ac_scale = 0.05 min_sil = 20 train_max : Maximum number of same samples for later training. min_sil : Minimum silence before detection. This value directly connected with accuracy and latency.","title":"Decoder Section:"},{"location":"batool/#captain-section","text":"; Threshold for detecting words [captain] hard_threshold = 0.35","title":"Captain Section:"},{"location":"batool/#miscellaneous-section","text":"; Miscellaneous parameters [misc] mic = \"Sennheiser\" channel = \"com_binaee_rebound\"","title":"Miscellaneous Section:"},{"location":"enn/","text":"ENN ENN generates neural network model from ENN samples. ENN samples are cepstrums that were normalized and aligned to a single word saved as a simple 40x40 binary array. we feed this to a convolutional neural network followed by a fully connected layer to detect out of vocabulary words. ENN is an optional feature that brings more accuracy and let you leave the system on always, so you dont need to say wake up words. ENN user interface includes these main tabs: Train Sample Link Wrong ENN Train In Train Tab you can watch the learning procedure of each word. In train Panel, learning loss and test loss is shown for first 4 words in wordlist panel. You can watch other word loss plots by pressing Up/Down arrow keys on keyboard. Hover on each word in word list panel to see how many samples are trained from total samples. Also you can sort the model statistics based on train precision, test precision and loss by clicking relevant table header (to reset the sort method click on ID header). Learned models will be saved in Model directory. Parameters Thread Num: Number of concurrent words to learn. (Be careful to set it lower than your number of CPU cores to prevent windows freeze) Learning rate: Base learning rate for each word to start training. Target Loss: Loss that model is considered learned. Param Num: Number of parameters the model has to learn. True Count: Number of ENN samples in enn/true directory. False Count: Number of ENN samples in enn/false directory. Learned Count: Number of words that their loss become less than target loss. Loop Count: Training for each word takes 200 epoch, if target loss not reached. Then next word's training procedure starts. After all words training finished, program will start from first word and increases loop count. Train Time: Time that program is training words. ENN Sample Link In sample link tab all true sample cepstrums are ploted in images. In this way you can find out why training for a word has large loss and not reaches the target loss. By using direction arrow keys you can select then play the wave related to each sample. Also change the word to see its samples. (Train procedure is not stopped while sample link is active) Wrong In training procedure, some samples couldn't be learned, they will be stored in Models/Wrong directory. For each model there is a relevant .wrong file that is filled by all failed samples. In the same way as Sample Link you can watch wrong detected sample cepstrums and here relevant recorded wave. The label for each sample is shown in right bottom corner of its cepstrum.","title":"ENN"},{"location":"enn/#enn","text":"ENN generates neural network model from ENN samples. ENN samples are cepstrums that were normalized and aligned to a single word saved as a simple 40x40 binary array. we feed this to a convolutional neural network followed by a fully connected layer to detect out of vocabulary words. ENN is an optional feature that brings more accuracy and let you leave the system on always, so you dont need to say wake up words. ENN user interface includes these main tabs: Train Sample Link Wrong","title":"ENN"},{"location":"enn/#enn-train","text":"In Train Tab you can watch the learning procedure of each word. In train Panel, learning loss and test loss is shown for first 4 words in wordlist panel. You can watch other word loss plots by pressing Up/Down arrow keys on keyboard. Hover on each word in word list panel to see how many samples are trained from total samples. Also you can sort the model statistics based on train precision, test precision and loss by clicking relevant table header (to reset the sort method click on ID header). Learned models will be saved in Model directory.","title":"ENN Train"},{"location":"enn/#parameters","text":"Thread Num: Number of concurrent words to learn. (Be careful to set it lower than your number of CPU cores to prevent windows freeze) Learning rate: Base learning rate for each word to start training. Target Loss: Loss that model is considered learned. Param Num: Number of parameters the model has to learn. True Count: Number of ENN samples in enn/true directory. False Count: Number of ENN samples in enn/false directory. Learned Count: Number of words that their loss become less than target loss. Loop Count: Training for each word takes 200 epoch, if target loss not reached. Then next word's training procedure starts. After all words training finished, program will start from first word and increases loop count. Train Time: Time that program is training words.","title":"Parameters"},{"location":"enn/#enn-sample-link","text":"In sample link tab all true sample cepstrums are ploted in images. In this way you can find out why training for a word has large loss and not reaches the target loss. By using direction arrow keys you can select then play the wave related to each sample. Also change the word to see its samples. (Train procedure is not stopped while sample link is active)","title":"ENN Sample Link"},{"location":"enn/#wrong","text":"In training procedure, some samples couldn't be learned, they will be stored in Models/Wrong directory. For each model there is a relevant .wrong file that is filled by all failed samples. In the same way as Sample Link you can watch wrong detected sample cepstrums and here relevant recorded wave. The label for each sample is shown in right bottom corner of its cepstrum.","title":"Wrong"},{"location":"rebound/","text":"Rebound","title":"Rebound"},{"location":"rebound/#rebound","text":"","title":"Rebound"},{"location":"accjoon/AccCommands/","text":"Table of Content acc_getVal acc_setVal acc_list acc_listChild acc_getParent acc_getChild acc_search acc_getType acc_getState acc_getName \u25c4 Acc Script acc_getVal string acc_getVal(\"acc_path\") Get value from an acc_path acc_setVal void acc_setVal(\"acc_path\", \"value\") Set value for an acc_path acc_list void acc_list(\"acc_path\") List all children in a recursive manner optional Acc path is the parent acc that the listing process begins, can be remained empty. acc_listChild void acc_listChild(\"acc_path\") List all children of acc from acc_path optional Acc path is the parent acc that the listing process begins, can be remained empty. acc_getParent string acc_getParent(\"acc_path\") Get parent path of acc_path acc_getChild string acc_getParent(\"acc_path\", \"name\") Get child match with name and from path of acc_path acc_search string acc_search(\"acc_path\", \"name\") Search path by replacing ? with possible cases of acc_path to find acc match with name , then returns true path Acc path is a known path with only few unknown steps represented by ? acc_getType string acc_getParent(\"acc_path\") Get type of acc from path of acc_path acc_getState string acc_getState(\"acc_path\") Get State of acc from path of acc_path acc_getName string acc_getName(\"acc_path\") Get name of acc from path of acc_path","title":"Acc Commands"},{"location":"accjoon/AccCommands/#table-of-content","text":"acc_getVal acc_setVal acc_list acc_listChild acc_getParent acc_getChild acc_search acc_getType acc_getState acc_getName","title":"Table of Content"},{"location":"accjoon/AccCommands/#acc-script","text":"","title":"\u25c4 Acc Script"},{"location":"accjoon/AccCommands/#acc_getval","text":"string acc_getVal(\"acc_path\") Get value from an acc_path","title":"acc_getVal"},{"location":"accjoon/AccCommands/#acc_setval","text":"void acc_setVal(\"acc_path\", \"value\") Set value for an acc_path","title":"acc_setVal"},{"location":"accjoon/AccCommands/#acc_list","text":"void acc_list(\"acc_path\") List all children in a recursive manner","title":"acc_list"},{"location":"accjoon/AccCommands/#_1","text":"optional Acc path is the parent acc that the listing process begins, can be remained empty.","title":""},{"location":"accjoon/AccCommands/#acc_listchild","text":"void acc_listChild(\"acc_path\") List all children of acc from acc_path","title":"acc_listChild"},{"location":"accjoon/AccCommands/#_2","text":"optional Acc path is the parent acc that the listing process begins, can be remained empty.","title":""},{"location":"accjoon/AccCommands/#acc_getparent","text":"string acc_getParent(\"acc_path\") Get parent path of acc_path","title":"acc_getParent"},{"location":"accjoon/AccCommands/#acc_getchild","text":"string acc_getParent(\"acc_path\", \"name\") Get child match with name and from path of acc_path","title":"acc_getChild"},{"location":"accjoon/AccCommands/#acc_search","text":"string acc_search(\"acc_path\", \"name\") Search path by replacing ? with possible cases of acc_path to find acc match with name , then returns true path","title":"acc_search"},{"location":"accjoon/AccCommands/#_3","text":"Acc path is a known path with only few unknown steps represented by ?","title":""},{"location":"accjoon/AccCommands/#acc_gettype","text":"string acc_getParent(\"acc_path\") Get type of acc from path of acc_path","title":"acc_getType"},{"location":"accjoon/AccCommands/#acc_getstate","text":"string acc_getState(\"acc_path\") Get State of acc from path of acc_path","title":"acc_getState"},{"location":"accjoon/AccCommands/#acc_getname","text":"string acc_getName(\"acc_path\") Get name of acc from path of acc_path","title":"acc_getName"},{"location":"accjoon/AccScript/","text":"AccScript Language Acc Commands acc_getVal acc_setVal acc_list acc_listChild acc_getType acc_getState acc_getName acc_getParent acc_getChild acc_search Application Commands shortcut open Miscellaneous Commands key sleep lua print click Programming Commands if else assignment Uia Commands uia_getVal uia_setVal uia_list uia_listChild uia_getType uia_getState uia_getName uia_getParent uia_getChild uia_search Examples Qt Example","title":"Script"},{"location":"accjoon/AccScript/#accscript-language","text":"","title":"AccScript Language"},{"location":"accjoon/AccScript/#acc-commands","text":"acc_getVal acc_setVal acc_list acc_listChild acc_getType acc_getState acc_getName acc_getParent acc_getChild acc_search","title":"Acc Commands"},{"location":"accjoon/AccScript/#application-commands","text":"shortcut open","title":"Application Commands"},{"location":"accjoon/AccScript/#miscellaneous-commands","text":"key sleep lua print click","title":"Miscellaneous Commands"},{"location":"accjoon/AccScript/#programming-commands","text":"if else assignment","title":"Programming Commands"},{"location":"accjoon/AccScript/#uia-commands","text":"uia_getVal uia_setVal uia_list uia_listChild uia_getType uia_getState uia_getName uia_getParent uia_getChild uia_search","title":"Uia Commands"},{"location":"accjoon/AccScript/#examples","text":"Qt Example","title":"Examples"},{"location":"accjoon/AppCommands/","text":"Table of Content app open isOpen waitOpen \u25c4 Acc Script app app(\"name\", \"title\") { ... } Focus on an application by providing ** <name> ** case-insensitive name is part of application app's name. Examples: Qt , Altium , Telegram ** <title>** optional To match better, you can specify a string that the matched window title should have open void open(\"arg\", workspace) open an application <arg> optional Open application with arguments of arg <workspace> optional Open application in the specified workspace number, start from 1 isOpen int isOpen(\"process_name\") Returns 1 if process_name is existed otherwise returns 0. <process_name> Examples: X2.exe , gitkraken.exe waitOpen void waitOpen(\"process_name\") Wait for opening process_name ** <process_name>** Examples: X2.exe , gitkraken.exe","title":"Application Commands"},{"location":"accjoon/AppCommands/#table-of-content","text":"app open isOpen waitOpen","title":"Table of Content"},{"location":"accjoon/AppCommands/#acc-script","text":"","title":"\u25c4 Acc Script"},{"location":"accjoon/AppCommands/#app","text":"app(\"name\", \"title\") { ... } Focus on an application by providing ** <name> ** case-insensitive name is part of application app's name. Examples: Qt , Altium , Telegram ** <title>** optional To match better, you can specify a string that the matched window title should have","title":"app"},{"location":"accjoon/AppCommands/#open","text":"void open(\"arg\", workspace) open an application <arg> optional Open application with arguments of arg <workspace> optional Open application in the specified workspace number, start from 1","title":"open"},{"location":"accjoon/AppCommands/#isopen","text":"int isOpen(\"process_name\") Returns 1 if process_name is existed otherwise returns 0. <process_name> Examples: X2.exe , gitkraken.exe","title":"isOpen"},{"location":"accjoon/AppCommands/#waitopen","text":"void waitOpen(\"process_name\") Wait for opening process_name ** <process_name>** Examples: X2.exe , gitkraken.exe","title":"waitOpen"},{"location":"accjoon/Examples/","text":"Qt Example shortcut(\"Qt\") { open(\"mom.exe\", \"\", 6) sleep(2000) click(\"4.1.3.3.1.7\", \"L\", \"Mom\") sleep(2000) key(\"F5\") sleep(2000) key(\"Ctrl+1\") } shortcut will find the shortcut which contains Qt in its name. then get the application exe_name and try to find the processor with the same exe_name . if the process was successful then Accjoon will focus on that process window and record it's hwnd . sleep sleep amount of 2000 miliseconds. click will find the acc object of 4.1.3.3.1.7 , then find the child with name Mom , and then perform Left click on center of acc object. then sleep 2000ms more. key will press F5 and so on ... \u25c4 Acc Script","title":"Examples"},{"location":"accjoon/Examples/#qt-example","text":"shortcut(\"Qt\") { open(\"mom.exe\", \"\", 6) sleep(2000) click(\"4.1.3.3.1.7\", \"L\", \"Mom\") sleep(2000) key(\"F5\") sleep(2000) key(\"Ctrl+1\") } shortcut will find the shortcut which contains Qt in its name. then get the application exe_name and try to find the processor with the same exe_name . if the process was successful then Accjoon will focus on that process window and record it's hwnd . sleep sleep amount of 2000 miliseconds. click will find the acc object of 4.1.3.3.1.7 , then find the child with name Mom , and then perform Left click on center of acc object. then sleep 2000ms more. key will press F5 and so on ...","title":"Qt Example"},{"location":"accjoon/Examples/#acc-script","text":"","title":"\u25c4 Acc Script"},{"location":"accjoon/MiscCommands/","text":"Table of Content key sleep lua print click return \u25c4 Acc Script key void key(\"key\") Press key key example: Ctrl+Shift+1, F1, Super+D sleep void sleep(value) Sleep value in miliseconds lua void lua(\"script_path\") Run lua from script_path print void print(\"value\") Print value in debug console click void click(\"acc_path\", \"action\", \"name\", offset_x, offset_y, offset_id) Do an action on center of acc_path ** <action> ** Possible actions are L : Left Click R : Right Click M : Middle Click D : Double Click C : Report Child ID (Debug Action) <name> optional Specify a child in a list <offset_x, offset_y> optional Add offset to the click position <offset_id> optional Add offset to final child Id return return Return from the app.","title":"Miscellaneous Commands"},{"location":"accjoon/MiscCommands/#table-of-content","text":"key sleep lua print click return","title":"Table of Content"},{"location":"accjoon/MiscCommands/#acc-script","text":"","title":"\u25c4 Acc Script"},{"location":"accjoon/MiscCommands/#key","text":"void key(\"key\") Press key key example: Ctrl+Shift+1, F1, Super+D","title":"key"},{"location":"accjoon/MiscCommands/#sleep","text":"void sleep(value) Sleep value in miliseconds","title":"sleep"},{"location":"accjoon/MiscCommands/#lua","text":"void lua(\"script_path\") Run lua from script_path","title":"lua"},{"location":"accjoon/MiscCommands/#print","text":"void print(\"value\") Print value in debug console","title":"print"},{"location":"accjoon/MiscCommands/#click","text":"void click(\"acc_path\", \"action\", \"name\", offset_x, offset_y, offset_id) Do an action on center of acc_path ** <action> ** Possible actions are L : Left Click R : Right Click M : Middle Click D : Double Click C : Report Child ID (Debug Action) <name> optional Specify a child in a list <offset_x, offset_y> optional Add offset to the click position <offset_id> optional Add offset to final child Id","title":"click"},{"location":"accjoon/MiscCommands/#return","text":"return Return from the app.","title":"return"},{"location":"accjoon/NPCommands/","text":"Table of Content np \u25c4 Acc Script np np(\"name\", \"title\") { if( \"$1\"==\"shape\" ) { uia_toggle(\"$3\") } } Named Pipe command np is a capability that you can call scripts from a named pipe channel. This block of code is not executed by AccJoon in order. To inject some commands on-demand, use np block of code. Its format looks like app command. ** <name> ** case-insensitive name is part of application app's name. Examples: Qt , Altium , Telegram ** <title>** optional To match better, you can specify a string that the matched window title should have. In case of passing arguments from named pipe, they are interpreted as variables and will be set in variable list of the np application. Arguments are comma separated and set on script variables in order. Named Pipe Named Pipe command looks like: named_pipe name, arguments Example: named_pipe_data: Altium, shape, wire then variable $1 is set to shape and $2 is set to wire .","title":"Name Pipe Commands"},{"location":"accjoon/NPCommands/#table-of-content","text":"np","title":"Table of Content"},{"location":"accjoon/NPCommands/#acc-script","text":"","title":"\u25c4 Acc Script"},{"location":"accjoon/NPCommands/#np","text":"np(\"name\", \"title\") { if( \"$1\"==\"shape\" ) { uia_toggle(\"$3\") } } Named Pipe command np is a capability that you can call scripts from a named pipe channel. This block of code is not executed by AccJoon in order. To inject some commands on-demand, use np block of code. Its format looks like app command. ** <name> ** case-insensitive name is part of application app's name. Examples: Qt , Altium , Telegram ** <title>** optional To match better, you can specify a string that the matched window title should have. In case of passing arguments from named pipe, they are interpreted as variables and will be set in variable list of the np application. Arguments are comma separated and set on script variables in order.","title":"np"},{"location":"accjoon/NPCommands/#named-pipe","text":"Named Pipe command looks like: named_pipe name, arguments Example: named_pipe_data: Altium, shape, wire then variable $1 is set to shape and $2 is set to wire .","title":"Named Pipe"},{"location":"accjoon/ProgCommands/","text":"Table of Content if else assignment \u25c4 Acc Script if if( condition ) { ... } else else { ... } assignment variable = \"value\" variable += \"value\"","title":"Programming Commands"},{"location":"accjoon/ProgCommands/#table-of-content","text":"if else assignment","title":"Table of Content"},{"location":"accjoon/ProgCommands/#acc-script","text":"","title":"\u25c4 Acc Script"},{"location":"accjoon/ProgCommands/#if","text":"if( condition ) { ... }","title":"if"},{"location":"accjoon/ProgCommands/#else","text":"else { ... }","title":"else"},{"location":"accjoon/ProgCommands/#assignment","text":"variable = \"value\" variable += \"value\"","title":"assignment"},{"location":"accjoon/UiaCommands/","text":"Table of Content uia_getVal uia_setVal uia_list uia_listChild uia_getParent uia_getChild uia_search uia_getType uia_getState uia_getName uia_toggle uia_getToggle \u25c4 Acc Script uia_getVal string uia_getVal(\"uia_path\") Get value from an uia_path uia_setVal void uia_setVal(\"uia_path\", \"value\") Set value for an uia_path uia_list void uia_list(\"uia_path\") List all children in a recursive manner optional Uia path is the parent uia that the listing process begins, can be remained empty. uia_listChild void uia_listChild(\"uia_path\") List all children of uia from uia_path optional Uia path is the parent uia that the listing process begins, can be remained empty. uia_getParent string uia_getParent(\"uia_path\") Get parent path of uia_path uia_getChild string uia_getParent(\"uia_path\", \"name\") Get child match with name and from path of uia_path uia_search string uia_search(\"uia_path\", \"name\") Search path by replacing ? with possible cases of uia_path to find uia match with name , then returns true path Uia path is a known path with only few unknown steps represented by ? uia_getType string uia_getParent(\"uia_path\") Get type of uia from path of uia_path uia_getState string uia_getState(\"uia_path\") Get State of uia from path of uia_path uia_getName string uia_getName(\"uia_path\") Get name of uia from path of uia_path uia_toggle void uia_toggle(\"uia_path\") Toggle value of component from path of uia_path , if it supports UIA_ToggleToggleStatePropertyId. uia_toggle string uia_getToggle(\"uia_path\") Get toggle value of component from path of uia_path , if it supports UIA_ToggleToggleStatePropertyId.","title":"Uia Commands"},{"location":"accjoon/UiaCommands/#table-of-content","text":"uia_getVal uia_setVal uia_list uia_listChild uia_getParent uia_getChild uia_search uia_getType uia_getState uia_getName uia_toggle uia_getToggle","title":"Table of Content"},{"location":"accjoon/UiaCommands/#acc-script","text":"","title":"\u25c4 Acc Script"},{"location":"accjoon/UiaCommands/#uia_getval","text":"string uia_getVal(\"uia_path\") Get value from an uia_path","title":"uia_getVal"},{"location":"accjoon/UiaCommands/#uia_setval","text":"void uia_setVal(\"uia_path\", \"value\") Set value for an uia_path","title":"uia_setVal"},{"location":"accjoon/UiaCommands/#uia_list","text":"void uia_list(\"uia_path\") List all children in a recursive manner","title":"uia_list"},{"location":"accjoon/UiaCommands/#_1","text":"optional Uia path is the parent uia that the listing process begins, can be remained empty.","title":""},{"location":"accjoon/UiaCommands/#uia_listchild","text":"void uia_listChild(\"uia_path\") List all children of uia from uia_path","title":"uia_listChild"},{"location":"accjoon/UiaCommands/#_2","text":"optional Uia path is the parent uia that the listing process begins, can be remained empty.","title":""},{"location":"accjoon/UiaCommands/#uia_getparent","text":"string uia_getParent(\"uia_path\") Get parent path of uia_path","title":"uia_getParent"},{"location":"accjoon/UiaCommands/#uia_getchild","text":"string uia_getParent(\"uia_path\", \"name\") Get child match with name and from path of uia_path","title":"uia_getChild"},{"location":"accjoon/UiaCommands/#uia_search","text":"string uia_search(\"uia_path\", \"name\") Search path by replacing ? with possible cases of uia_path to find uia match with name , then returns true path","title":"uia_search"},{"location":"accjoon/UiaCommands/#_3","text":"Uia path is a known path with only few unknown steps represented by ?","title":""},{"location":"accjoon/UiaCommands/#uia_gettype","text":"string uia_getParent(\"uia_path\") Get type of uia from path of uia_path","title":"uia_getType"},{"location":"accjoon/UiaCommands/#uia_getstate","text":"string uia_getState(\"uia_path\") Get State of uia from path of uia_path","title":"uia_getState"},{"location":"accjoon/UiaCommands/#uia_getname","text":"string uia_getName(\"uia_path\") Get name of uia from path of uia_path","title":"uia_getName"},{"location":"accjoon/UiaCommands/#uia_toggle","text":"void uia_toggle(\"uia_path\") Toggle value of component from path of uia_path , if it supports UIA_ToggleToggleStatePropertyId.","title":"uia_toggle"},{"location":"accjoon/UiaCommands/#uia_toggle_1","text":"string uia_getToggle(\"uia_path\") Get toggle value of component from path of uia_path , if it supports UIA_ToggleToggleStatePropertyId.","title":"uia_toggle"}]}